// source: time.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var validation_pb = require('./validation_pb.js');
goog.object.extend(proto, validation_pb);
goog.exportSymbol('proto.squareup.common.time.DateTime', null, global);
goog.exportSymbol('proto.squareup.common.time.DateTimeInterval', null, global);
goog.exportSymbol('proto.squareup.common.time.DayOfWeek', null, global);
goog.exportSymbol('proto.squareup.common.time.DayTime', null, global);
goog.exportSymbol('proto.squareup.common.time.LocalTime', null, global);
goog.exportSymbol('proto.squareup.common.time.YearMonth', null, global);
goog.exportSymbol('proto.squareup.common.time.YearMonthDay', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.squareup.common.time.DateTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.squareup.common.time.DateTime.repeatedFields_, null);
};
goog.inherits(proto.squareup.common.time.DateTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.squareup.common.time.DateTime.displayName = 'proto.squareup.common.time.DateTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.squareup.common.time.DateTimeInterval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.squareup.common.time.DateTimeInterval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.squareup.common.time.DateTimeInterval.displayName = 'proto.squareup.common.time.DateTimeInterval';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.squareup.common.time.YearMonth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.squareup.common.time.YearMonth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.squareup.common.time.YearMonth.displayName = 'proto.squareup.common.time.YearMonth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.squareup.common.time.YearMonthDay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.squareup.common.time.YearMonthDay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.squareup.common.time.YearMonthDay.displayName = 'proto.squareup.common.time.YearMonthDay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.squareup.common.time.LocalTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.squareup.common.time.LocalTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.squareup.common.time.LocalTime.displayName = 'proto.squareup.common.time.LocalTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.squareup.common.time.DayTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.squareup.common.time.DayTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.squareup.common.time.DayTime.displayName = 'proto.squareup.common.time.DayTime';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.squareup.common.time.DateTime.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.squareup.common.time.DateTime.prototype.toObject = function(opt_includeInstance) {
  return proto.squareup.common.time.DateTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.squareup.common.time.DateTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.time.DateTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    instantUsec: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    timezoneOffsetMin: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    posixTz: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    tzNameList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    ordinal: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.squareup.common.time.DateTime}
 */
proto.squareup.common.time.DateTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.squareup.common.time.DateTime;
  return proto.squareup.common.time.DateTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.squareup.common.time.DateTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.squareup.common.time.DateTime}
 */
proto.squareup.common.time.DateTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInstantUsec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTimezoneOffsetMin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosixTz(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTzName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOrdinal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.squareup.common.time.DateTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.squareup.common.time.DateTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.squareup.common.time.DateTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.time.DateTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTzNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int64 instant_usec = 1;
 * @return {number}
 */
proto.squareup.common.time.DateTime.prototype.getInstantUsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.DateTime} returns this
 */
proto.squareup.common.time.DateTime.prototype.setInstantUsec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.DateTime} returns this
 */
proto.squareup.common.time.DateTime.prototype.clearInstantUsec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.DateTime.prototype.hasInstantUsec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint32 timezone_offset_min = 2;
 * @return {number}
 */
proto.squareup.common.time.DateTime.prototype.getTimezoneOffsetMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.DateTime} returns this
 */
proto.squareup.common.time.DateTime.prototype.setTimezoneOffsetMin = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.DateTime} returns this
 */
proto.squareup.common.time.DateTime.prototype.clearTimezoneOffsetMin = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.DateTime.prototype.hasTimezoneOffsetMin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string posix_tz = 3;
 * @return {string}
 */
proto.squareup.common.time.DateTime.prototype.getPosixTz = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.squareup.common.time.DateTime} returns this
 */
proto.squareup.common.time.DateTime.prototype.setPosixTz = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.DateTime} returns this
 */
proto.squareup.common.time.DateTime.prototype.clearPosixTz = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.DateTime.prototype.hasPosixTz = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string tz_name = 4;
 * @return {!Array<string>}
 */
proto.squareup.common.time.DateTime.prototype.getTzNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.squareup.common.time.DateTime} returns this
 */
proto.squareup.common.time.DateTime.prototype.setTzNameList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.squareup.common.time.DateTime} returns this
 */
proto.squareup.common.time.DateTime.prototype.addTzName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.squareup.common.time.DateTime} returns this
 */
proto.squareup.common.time.DateTime.prototype.clearTzNameList = function() {
  return this.setTzNameList([]);
};


/**
 * optional int64 ordinal = 5;
 * @return {number}
 */
proto.squareup.common.time.DateTime.prototype.getOrdinal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.DateTime} returns this
 */
proto.squareup.common.time.DateTime.prototype.setOrdinal = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.DateTime} returns this
 */
proto.squareup.common.time.DateTime.prototype.clearOrdinal = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.DateTime.prototype.hasOrdinal = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.squareup.common.time.DateTimeInterval.prototype.toObject = function(opt_includeInstance) {
  return proto.squareup.common.time.DateTimeInterval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.squareup.common.time.DateTimeInterval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.time.DateTimeInterval.toObject = function(includeInstance, msg) {
  var f, obj = {
    inclusiveStart: (f = msg.getInclusiveStart()) && proto.squareup.common.time.DateTime.toObject(includeInstance, f),
    exclusiveEnd: (f = msg.getExclusiveEnd()) && proto.squareup.common.time.DateTime.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.squareup.common.time.DateTimeInterval}
 */
proto.squareup.common.time.DateTimeInterval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.squareup.common.time.DateTimeInterval;
  return proto.squareup.common.time.DateTimeInterval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.squareup.common.time.DateTimeInterval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.squareup.common.time.DateTimeInterval}
 */
proto.squareup.common.time.DateTimeInterval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.squareup.common.time.DateTime;
      reader.readMessage(value,proto.squareup.common.time.DateTime.deserializeBinaryFromReader);
      msg.setInclusiveStart(value);
      break;
    case 2:
      var value = new proto.squareup.common.time.DateTime;
      reader.readMessage(value,proto.squareup.common.time.DateTime.deserializeBinaryFromReader);
      msg.setExclusiveEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.squareup.common.time.DateTimeInterval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.squareup.common.time.DateTimeInterval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.squareup.common.time.DateTimeInterval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.time.DateTimeInterval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInclusiveStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.squareup.common.time.DateTime.serializeBinaryToWriter
    );
  }
  f = message.getExclusiveEnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.squareup.common.time.DateTime.serializeBinaryToWriter
    );
  }
};


/**
 * optional DateTime inclusive_start = 1;
 * @return {?proto.squareup.common.time.DateTime}
 */
proto.squareup.common.time.DateTimeInterval.prototype.getInclusiveStart = function() {
  return /** @type{?proto.squareup.common.time.DateTime} */ (
    jspb.Message.getWrapperField(this, proto.squareup.common.time.DateTime, 1));
};


/**
 * @param {?proto.squareup.common.time.DateTime|undefined} value
 * @return {!proto.squareup.common.time.DateTimeInterval} returns this
*/
proto.squareup.common.time.DateTimeInterval.prototype.setInclusiveStart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.squareup.common.time.DateTimeInterval} returns this
 */
proto.squareup.common.time.DateTimeInterval.prototype.clearInclusiveStart = function() {
  return this.setInclusiveStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.DateTimeInterval.prototype.hasInclusiveStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DateTime exclusive_end = 2;
 * @return {?proto.squareup.common.time.DateTime}
 */
proto.squareup.common.time.DateTimeInterval.prototype.getExclusiveEnd = function() {
  return /** @type{?proto.squareup.common.time.DateTime} */ (
    jspb.Message.getWrapperField(this, proto.squareup.common.time.DateTime, 2));
};


/**
 * @param {?proto.squareup.common.time.DateTime|undefined} value
 * @return {!proto.squareup.common.time.DateTimeInterval} returns this
*/
proto.squareup.common.time.DateTimeInterval.prototype.setExclusiveEnd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.squareup.common.time.DateTimeInterval} returns this
 */
proto.squareup.common.time.DateTimeInterval.prototype.clearExclusiveEnd = function() {
  return this.setExclusiveEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.DateTimeInterval.prototype.hasExclusiveEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.squareup.common.time.YearMonth.prototype.toObject = function(opt_includeInstance) {
  return proto.squareup.common.time.YearMonth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.squareup.common.time.YearMonth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.time.YearMonth.toObject = function(includeInstance, msg) {
  var f, obj = {
    year: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    monthOfYear: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.squareup.common.time.YearMonth}
 */
proto.squareup.common.time.YearMonth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.squareup.common.time.YearMonth;
  return proto.squareup.common.time.YearMonth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.squareup.common.time.YearMonth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.squareup.common.time.YearMonth}
 */
proto.squareup.common.time.YearMonth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMonthOfYear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.squareup.common.time.YearMonth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.squareup.common.time.YearMonth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.squareup.common.time.YearMonth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.time.YearMonth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 year = 1;
 * @return {number}
 */
proto.squareup.common.time.YearMonth.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.YearMonth} returns this
 */
proto.squareup.common.time.YearMonth.prototype.setYear = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.YearMonth} returns this
 */
proto.squareup.common.time.YearMonth.prototype.clearYear = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.YearMonth.prototype.hasYear = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 month_of_year = 2;
 * @return {number}
 */
proto.squareup.common.time.YearMonth.prototype.getMonthOfYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.YearMonth} returns this
 */
proto.squareup.common.time.YearMonth.prototype.setMonthOfYear = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.YearMonth} returns this
 */
proto.squareup.common.time.YearMonth.prototype.clearMonthOfYear = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.YearMonth.prototype.hasMonthOfYear = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.squareup.common.time.YearMonthDay.prototype.toObject = function(opt_includeInstance) {
  return proto.squareup.common.time.YearMonthDay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.squareup.common.time.YearMonthDay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.time.YearMonthDay.toObject = function(includeInstance, msg) {
  var f, obj = {
    year: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    monthOfYear: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    dayOfMonth: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.squareup.common.time.YearMonthDay}
 */
proto.squareup.common.time.YearMonthDay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.squareup.common.time.YearMonthDay;
  return proto.squareup.common.time.YearMonthDay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.squareup.common.time.YearMonthDay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.squareup.common.time.YearMonthDay}
 */
proto.squareup.common.time.YearMonthDay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMonthOfYear(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDayOfMonth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.squareup.common.time.YearMonthDay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.squareup.common.time.YearMonthDay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.squareup.common.time.YearMonthDay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.time.YearMonthDay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 year = 1;
 * @return {number}
 */
proto.squareup.common.time.YearMonthDay.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.YearMonthDay} returns this
 */
proto.squareup.common.time.YearMonthDay.prototype.setYear = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.YearMonthDay} returns this
 */
proto.squareup.common.time.YearMonthDay.prototype.clearYear = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.YearMonthDay.prototype.hasYear = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 month_of_year = 2;
 * @return {number}
 */
proto.squareup.common.time.YearMonthDay.prototype.getMonthOfYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.YearMonthDay} returns this
 */
proto.squareup.common.time.YearMonthDay.prototype.setMonthOfYear = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.YearMonthDay} returns this
 */
proto.squareup.common.time.YearMonthDay.prototype.clearMonthOfYear = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.YearMonthDay.prototype.hasMonthOfYear = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 day_of_month = 3;
 * @return {number}
 */
proto.squareup.common.time.YearMonthDay.prototype.getDayOfMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.YearMonthDay} returns this
 */
proto.squareup.common.time.YearMonthDay.prototype.setDayOfMonth = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.YearMonthDay} returns this
 */
proto.squareup.common.time.YearMonthDay.prototype.clearDayOfMonth = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.YearMonthDay.prototype.hasDayOfMonth = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.squareup.common.time.LocalTime.prototype.toObject = function(opt_includeInstance) {
  return proto.squareup.common.time.LocalTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.squareup.common.time.LocalTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.time.LocalTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    hourOfDay: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    minuteOfHour: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    secondOfMinute: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    millisOfSecond: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.squareup.common.time.LocalTime}
 */
proto.squareup.common.time.LocalTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.squareup.common.time.LocalTime;
  return proto.squareup.common.time.LocalTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.squareup.common.time.LocalTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.squareup.common.time.LocalTime}
 */
proto.squareup.common.time.LocalTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHourOfDay(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinuteOfHour(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecondOfMinute(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMillisOfSecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.squareup.common.time.LocalTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.squareup.common.time.LocalTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.squareup.common.time.LocalTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.time.LocalTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 hour_of_day = 1;
 * @return {number}
 */
proto.squareup.common.time.LocalTime.prototype.getHourOfDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.LocalTime} returns this
 */
proto.squareup.common.time.LocalTime.prototype.setHourOfDay = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.LocalTime} returns this
 */
proto.squareup.common.time.LocalTime.prototype.clearHourOfDay = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.LocalTime.prototype.hasHourOfDay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 minute_of_hour = 2;
 * @return {number}
 */
proto.squareup.common.time.LocalTime.prototype.getMinuteOfHour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.LocalTime} returns this
 */
proto.squareup.common.time.LocalTime.prototype.setMinuteOfHour = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.LocalTime} returns this
 */
proto.squareup.common.time.LocalTime.prototype.clearMinuteOfHour = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.LocalTime.prototype.hasMinuteOfHour = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 second_of_minute = 3;
 * @return {number}
 */
proto.squareup.common.time.LocalTime.prototype.getSecondOfMinute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.LocalTime} returns this
 */
proto.squareup.common.time.LocalTime.prototype.setSecondOfMinute = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.LocalTime} returns this
 */
proto.squareup.common.time.LocalTime.prototype.clearSecondOfMinute = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.LocalTime.prototype.hasSecondOfMinute = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 millis_of_second = 4;
 * @return {number}
 */
proto.squareup.common.time.LocalTime.prototype.getMillisOfSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.LocalTime} returns this
 */
proto.squareup.common.time.LocalTime.prototype.setMillisOfSecond = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.LocalTime} returns this
 */
proto.squareup.common.time.LocalTime.prototype.clearMillisOfSecond = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.LocalTime.prototype.hasMillisOfSecond = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.squareup.common.time.DayTime.prototype.toObject = function(opt_includeInstance) {
  return proto.squareup.common.time.DayTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.squareup.common.time.DayTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.time.DayTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    dayOfWeek: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    timeAt: (f = msg.getTimeAt()) && proto.squareup.common.time.LocalTime.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.squareup.common.time.DayTime}
 */
proto.squareup.common.time.DayTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.squareup.common.time.DayTime;
  return proto.squareup.common.time.DayTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.squareup.common.time.DayTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.squareup.common.time.DayTime}
 */
proto.squareup.common.time.DayTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDayOfWeek(value);
      break;
    case 2:
      var value = new proto.squareup.common.time.LocalTime;
      reader.readMessage(value,proto.squareup.common.time.LocalTime.deserializeBinaryFromReader);
      msg.setTimeAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.squareup.common.time.DayTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.squareup.common.time.DayTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.squareup.common.time.DayTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.time.DayTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTimeAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.squareup.common.time.LocalTime.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 day_of_week = 1;
 * @return {number}
 */
proto.squareup.common.time.DayTime.prototype.getDayOfWeek = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.squareup.common.time.DayTime} returns this
 */
proto.squareup.common.time.DayTime.prototype.setDayOfWeek = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.squareup.common.time.DayTime} returns this
 */
proto.squareup.common.time.DayTime.prototype.clearDayOfWeek = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.DayTime.prototype.hasDayOfWeek = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LocalTime time_at = 2;
 * @return {?proto.squareup.common.time.LocalTime}
 */
proto.squareup.common.time.DayTime.prototype.getTimeAt = function() {
  return /** @type{?proto.squareup.common.time.LocalTime} */ (
    jspb.Message.getWrapperField(this, proto.squareup.common.time.LocalTime, 2));
};


/**
 * @param {?proto.squareup.common.time.LocalTime|undefined} value
 * @return {!proto.squareup.common.time.DayTime} returns this
*/
proto.squareup.common.time.DayTime.prototype.setTimeAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.squareup.common.time.DayTime} returns this
 */
proto.squareup.common.time.DayTime.prototype.clearTimeAt = function() {
  return this.setTimeAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.squareup.common.time.DayTime.prototype.hasTimeAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.squareup.common.time.DayOfWeek = {
  UNKNOWN_DO_NOT_USE: 0,
  MONDAY: 1,
  TUESDAY: 2,
  WEDNESDAY: 3,
  THURSDAY: 4,
  FRIDAY: 5,
  SATURDAY: 6,
  SUNDAY: 7
};

goog.object.extend(exports, proto.squareup.common.time);
