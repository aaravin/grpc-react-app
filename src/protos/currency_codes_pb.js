// source: currency_codes.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
var objc_pb = require('./objc_pb.js');
goog.object.extend(proto, objc_pb);
goog.exportSymbol('proto.squareup.common.CurrencyCode', null, global);
goog.exportSymbol('proto.squareup.common.Denominations', null, global);
goog.exportSymbol('proto.squareup.common.RoundingMode', null, global);
goog.exportSymbol('proto.squareup.common.cashRounding', null, global);
goog.exportSymbol('proto.squareup.common.denominations', null, global);
goog.exportSymbol('proto.squareup.common.roundingMode', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.squareup.common.Denominations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.squareup.common.Denominations.repeatedFields_, null);
};
goog.inherits(proto.squareup.common.Denominations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.squareup.common.Denominations.displayName = 'proto.squareup.common.Denominations';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.squareup.common.Denominations.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.squareup.common.Denominations.prototype.toObject = function(opt_includeInstance) {
  return proto.squareup.common.Denominations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.squareup.common.Denominations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.Denominations.toObject = function(includeInstance, msg) {
  var f, obj = {
    banknoteCentsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    coinCentsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.squareup.common.Denominations}
 */
proto.squareup.common.Denominations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.squareup.common.Denominations;
  return proto.squareup.common.Denominations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.squareup.common.Denominations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.squareup.common.Denominations}
 */
proto.squareup.common.Denominations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBanknoteCents(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCoinCents(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.squareup.common.Denominations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.squareup.common.Denominations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.squareup.common.Denominations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.squareup.common.Denominations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBanknoteCentsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = message.getCoinCentsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
};


/**
 * repeated int32 banknote_cents = 1;
 * @return {!Array<number>}
 */
proto.squareup.common.Denominations.prototype.getBanknoteCentsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.squareup.common.Denominations} returns this
 */
proto.squareup.common.Denominations.prototype.setBanknoteCentsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.squareup.common.Denominations} returns this
 */
proto.squareup.common.Denominations.prototype.addBanknoteCents = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.squareup.common.Denominations} returns this
 */
proto.squareup.common.Denominations.prototype.clearBanknoteCentsList = function() {
  return this.setBanknoteCentsList([]);
};


/**
 * repeated int32 coin_cents = 2;
 * @return {!Array<number>}
 */
proto.squareup.common.Denominations.prototype.getCoinCentsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.squareup.common.Denominations} returns this
 */
proto.squareup.common.Denominations.prototype.setCoinCentsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.squareup.common.Denominations} returns this
 */
proto.squareup.common.Denominations.prototype.addCoinCents = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.squareup.common.Denominations} returns this
 */
proto.squareup.common.Denominations.prototype.clearCoinCentsList = function() {
  return this.setCoinCentsList([]);
};


/**
 * @enum {number}
 */
proto.squareup.common.RoundingMode = {
  PLAIN: 0,
  DOWN: 1,
  UP: 2,
  BANKERS: 3,
  DOWN_ON_HALF: 4
};

/**
 * @enum {number}
 */
proto.squareup.common.CurrencyCode = {
  AED: 784,
  AFN: 971,
  ALL: 8,
  AMD: 51,
  ANG: 532,
  AOA: 973,
  ARS: 32,
  AUD: 36,
  AWG: 533,
  AZN: 944,
  BAM: 977,
  BBD: 52,
  BDT: 50,
  BGN: 975,
  BHD: 48,
  BIF: 108,
  BMD: 60,
  BND: 96,
  BOB: 68,
  BOV: 984,
  BRL: 986,
  BSD: 44,
  BTN: 64,
  BWP: 72,
  BYR: 974,
  BZD: 84,
  CAD: 124,
  CDF: 976,
  CHE: 947,
  CHF: 756,
  CHW: 948,
  CLF: 990,
  CLP: 152,
  CNY: 156,
  COP: 170,
  COU: 970,
  CRC: 188,
  CUC: 931,
  CUP: 192,
  CVE: 132,
  CZK: 203,
  DJF: 262,
  DKK: 208,
  DOP: 214,
  DZD: 12,
  EGP: 818,
  ERN: 232,
  ETB: 230,
  EUR: 978,
  FJD: 242,
  FKP: 238,
  GBP: 826,
  GEL: 981,
  GHS: 936,
  GIP: 292,
  GMD: 270,
  GNF: 324,
  GTQ: 320,
  GYD: 328,
  HKD: 344,
  HNL: 340,
  HRK: 191,
  HTG: 332,
  HUF: 348,
  IDR: 360,
  ILS: 376,
  INR: 356,
  IQD: 368,
  IRR: 364,
  ISK: 352,
  JMD: 388,
  JOD: 400,
  JPY: 392,
  KES: 404,
  KGS: 417,
  KHR: 116,
  KMF: 174,
  KPW: 408,
  KRW: 410,
  KWD: 414,
  KYD: 136,
  KZT: 398,
  LAK: 418,
  LBP: 422,
  LKR: 144,
  LRD: 430,
  LSL: 426,
  LTL: 440,
  LVL: 428,
  LYD: 434,
  MAD: 504,
  MDL: 498,
  MGA: 969,
  MKD: 807,
  MMK: 104,
  MNT: 496,
  MOP: 446,
  MRO: 478,
  MUR: 480,
  MVR: 462,
  MWK: 454,
  MXN: 484,
  MXV: 979,
  MYR: 458,
  MZN: 943,
  NAD: 516,
  NGN: 566,
  NIO: 558,
  NOK: 578,
  NPR: 524,
  NZD: 554,
  OMR: 512,
  PAB: 590,
  PEN: 604,
  PGK: 598,
  PHP: 608,
  PKR: 586,
  PLN: 985,
  PYG: 600,
  QAR: 634,
  RON: 946,
  RSD: 941,
  RUB: 643,
  RWF: 646,
  SAR: 682,
  SBD: 90,
  SCR: 690,
  SDG: 938,
  SEK: 752,
  SGD: 702,
  SHP: 654,
  SLL: 694,
  SOS: 706,
  SRD: 968,
  SSP: 728,
  STD: 678,
  SVC: 222,
  SYP: 760,
  SZL: 748,
  THB: 764,
  TJS: 972,
  TMT: 934,
  TND: 788,
  TOP: 776,
  TRY: 949,
  TTD: 780,
  TWD: 901,
  TZS: 834,
  UAH: 980,
  UGX: 800,
  USD: 840,
  USN: 997,
  USS: 998,
  UYI: 940,
  UYU: 858,
  UZS: 860,
  VEF: 937,
  VND: 704,
  VUV: 548,
  WST: 882,
  XAF: 950,
  XAG: 961,
  XAU: 959,
  XBA: 955,
  XBB: 956,
  XBC: 957,
  XBD: 958,
  XCD: 951,
  XDR: 960,
  XOF: 952,
  XPD: 964,
  XPF: 953,
  XPT: 962,
  XTS: 963,
  XXX: 999,
  YER: 886,
  ZAR: 710,
  ZMK: 894,
  ZMW: 967,
  BTC: 1001
};


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `cashRounding`.
 * @type {!jspb.ExtensionFieldInfo<number>}
 */
proto.squareup.common.cashRounding = new jspb.ExtensionFieldInfo(
    54000,
    {cashRounding: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

google_protobuf_descriptor_pb.EnumValueOptions.extensionsBinary[54000] = new jspb.ExtensionFieldBinaryInfo(
    proto.squareup.common.cashRounding,
    jspb.BinaryReader.prototype.readInt32,
    jspb.BinaryWriter.prototype.writeInt32,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.EnumValueOptions.extensions[54000] = proto.squareup.common.cashRounding;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `denominations`.
 * @type {!jspb.ExtensionFieldInfo<!proto.squareup.common.Denominations>}
 */
proto.squareup.common.denominations = new jspb.ExtensionFieldInfo(
    54001,
    {denominations: 0},
    proto.squareup.common.Denominations,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.squareup.common.Denominations.toObject),
    0);

google_protobuf_descriptor_pb.EnumValueOptions.extensionsBinary[54001] = new jspb.ExtensionFieldBinaryInfo(
    proto.squareup.common.denominations,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.squareup.common.Denominations.serializeBinaryToWriter,
    proto.squareup.common.Denominations.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.EnumValueOptions.extensions[54001] = proto.squareup.common.denominations;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `roundingMode`.
 * @type {!jspb.ExtensionFieldInfo<!proto.squareup.common.RoundingMode>}
 */
proto.squareup.common.roundingMode = new jspb.ExtensionFieldInfo(
    54002,
    {roundingMode: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

google_protobuf_descriptor_pb.EnumValueOptions.extensionsBinary[54002] = new jspb.ExtensionFieldBinaryInfo(
    proto.squareup.common.roundingMode,
    jspb.BinaryReader.prototype.readEnum,
    jspb.BinaryWriter.prototype.writeEnum,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.EnumValueOptions.extensions[54002] = proto.squareup.common.roundingMode;

goog.object.extend(exports, proto.squareup.common);
